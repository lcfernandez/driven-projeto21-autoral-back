generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  position    Int
  lane_id     Int
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  lanes       lanes        @relation(fields: [lane_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cards_tags  cards_tags[]
}

model cards_tags {
  id         Int      @id @default(autoincrement())
  card_id    Int
  tag_id     Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  cards      cards    @relation(fields: [card_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lanes {
  id         Int      @id @default(autoincrement())
  title      String
  position   Int
  project_id Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  cards      cards[]
  projects   projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model moodboards {
  id                Int                 @id @default(autoincrement())
  project_id        Int
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  projects          projects            @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  moodboards_images moodboards_images[]
}

model moodboards_images {
  id           Int        @id @default(autoincrement())
  url          String
  pos_x        Int
  pos_y        Int
  high         Int
  width        Int
  moodboard_id Int
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  moodboards   moodboards @relation(fields: [moodboard_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model projects {
  id         Int          @id @default(autoincrement())
  name       String
  user_id    Int
  status_id  Int
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  lanes      lanes[]
  moodboards moodboards[]
  status     status       @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags       tags[]
}

model status {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  projects   projects[]
}

model tags {
  id         Int          @id @default(autoincrement())
  title      String
  color      String       @db.VarChar(6)
  bgcolor    String       @db.VarChar(6)
  project_id Int
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  cards_tags cards_tags[]
  projects   projects     @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  token      String
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  projects   projects[]
}
